#R script-htseq.r -- R scritpt starts here
#======================
# Load libraries
library("dplyr")
library("tools")
#source("https://bioconductor.org/biocLite.R")
#biocLite("DESeq2")
library("DESeq2")
library("RColorBrewer")
library("gplots")
#biocLite("pheatmap")
library("pheatmap")
library(DESeq2)
library(gtools)
library(dplyr)
R
R version
version
getwd()
setwd("C:/Users/Fei/Dropbox (EinsteinMed)/RNA-Seq/WTDAY6-vs-KODAY6")
directory <- getwd()
comparison = "WTDAY6-vs-KODAY6"
refCond = sub("-vs-(.*)$", "", comparison)
FC = 0
negFC = FC*(-1)
pvalue = 0.05
pvaluetype = "padj"
conditionfile <- "Conditions.txt"
Cond <- read.table(conditionfile, header=TRUE, row.names=1, fill=TRUE)
Cond$condition <- factor(Cond$condition)
Cond$batch <- factor(Cond$batch)
myCond <- Cond[mixedorder(row.names(Cond)),,drop=FALSE]
head(myCond)
sample_amount <- nrow(myCond)
countFiles <- grep("*.counts.txt",list.files(directory),value=TRUE)
sampleNames <- sub(".counts.txt","",countFiles)
countFiles <- countFiles[mixedorder(sampleNames),drop=FALSE]
countData <- read.table(countFiles[1], row.names=1, check.names=FALSE, quote="\"", fill=TRUE, header=TRUE, sep="\t")
countData <- countData[, 5:ncol(countData), drop=FALSE]
countMatrix <- data.frame(matrix(ncol=0,nrow=nrow(countData)))
countMatrix <- cbind(countMatrix, countData)
colnames(countMatrix)[1] <- "length"
colnames(countMatrix)[2] <- sampleNames[1]
for(i in 2:length(sampleNames)){
countData <- read.table(countFiles[i], row.names=1, check.names=FALSE, quote="\"", fill=TRUE, header=TRUE, sep="\t")
countData <- countData[, 6:ncol(countData), drop=FALSE]
colnames(countData) <- sampleNames[i]
countMatrix <- cbind(countMatrix, countData)
}
countMatrix <- countMatrix[ ,2:ncol(countMatrix)]
if (anyNA(myCond$batch)){
dds = DESeqDataSetFromMatrix(countMatrix, myCond, design = ~ condition)
} else {
dds = DESeqDataSetFromMatrix(countMatrix, myCond, design = ~ batch + condition)
}
dds$condition <- relevel(dds$condition, ref=refCond)
dds <- dds[rowSums(counts(dds)) > 10 * dim(myCond)[1]]
dds <- DESeq(dds)
res <- results(dds, alpha = 0.1)
res <- res[complete.cases(res),]
res
write.csv(countMatrix, file = "rawCounts.csv")
normalizedCounts <- counts(dds, normalized = T)
write.csv(normalizedCounts, file = "normalizedCounts.csv")
resOrdered <- res[order(res$padj),]
write.csv(as.data.frame(resOrdered), file="rawDEGs.csv")
SigDEGs <- subset(resOrdered, eval(as.name(pvaluetype)) < pvalue & abs(log2FoldChange) > FC)
write.csv(as.data.frame(SigDEGs), file="rawSigDEGs.csv")
SigDEGsUp <- subset(resOrdered, eval(as.name(pvaluetype)) < pvalue & (log2FoldChange) > FC)
SigDEGsDown <- subset(resOrdered, eval(as.name(pvaluetype)) < pvalue & (log2FoldChange) < negFC)
SigDEGsList <- SigDEGs[0]
write.table(as.data.frame(SigDEGsList), "SigDEGsList.tsv", quote=FALSE, col.names=FALSE, sep="\t")
SigDEGsUpList <- SigDEGsUp[0]
write.table(as.data.frame(SigDEGsUpList), "SigDEGsUpList.tsv", quote=FALSE, col.names=FALSE, sep="\t")
SigDEGsDownList <- SigDEGsDown[0]
write.table(as.data.frame(SigDEGsDownList), "SigDEGsDownList.tsv", quote=FALSE, col.names=FALSE, sep="\t")
DEGs = read.table("rawDEGs.csv",header=T,sep=",")
SigDEGs = read.table("rawSigDEGs.csv", header=T,sep=",")
normalizedCounts = read.table("normalizedCounts.csv",header=T,sep=",",check.names=FALSE)
colnames(DEGs)[1] <- "ID"
colnames(SigDEGs)[1] <- "ID"
colnames(normalizedCounts)[1] <- "ID"
DEGNormalizedCounts = merge(DEGs,normalizedCounts,by="ID")
SigDEGNormalizedCounts = merge(SigDEGs,normalizedCounts,by="ID")
DEGNormalizedCounts = DEGNormalizedCounts[DEGNormalizedCounts$ID != "",]
SigDEGNormalizedCounts = SigDEGNormalizedCounts[SigDEGNormalizedCounts$ID != "",]
write.csv(DEGNormalizedCounts, file="DEGs.csv", row.names=F, quote=T)
write.csv(SigDEGNormalizedCounts, file="SigDEGs.csv", row.names=F, quote=T)
#plotMA(dds)
library(RColorBrewer)
rld <- rlog(dds) # regular log transformation
write.csv(assay(rld), file = "rlog_transformed_counts.csv")
sampleDists <- dist(t(assay(rld)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste( row.names(colData(rld)), rld$condition, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
png(file = "SampleDistances.png", width = 1600, height = 1600, units = "px", res = 300)
pheatmap(sampleDistMatrix,clustering_distance_rows=sampleDists,clustering_distance_cols=sampleDists,col=colors, fontsize = 6, main=comparison)
dev.off()
# PCA analysis on samples
png(file = "PCA.png", width = 1600, height = 1600, units = "px", res = 300)
pcaData <- plotPCA(rld, intgroup=c("condition"), returnData=TRUE)
colnames(pcaData)[3:5] <- c("Group", "Condition", "Name")
percentVar <- round(100 * attr(pcaData, "percentVar"))
pcaplot <- ggplot(pcaData, aes(PC1, PC2, shape=Condition)) +
aes(color=Name) +
geom_point(size=3.0) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed() +
ggtitle(comparison) +
theme(plot.title = element_text(vjust = 10)) +
ylim(c(-2.5,2.5))
theme(plot.title = element_text(hjust = 0.5))
print(pcaplot)
dev.off()
library(ggplot2)
library(RColorBrewer)
library(ggplot2)
rld <- rlog(dds) # regular log transformation
write.csv(assay(rld), file = "rlog_transformed_counts.csv")
sampleDists <- dist(t(assay(rld)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste( row.names(colData(rld)), rld$condition, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
png(file = "SampleDistances.png", width = 1600, height = 1600, units = "px", res = 300)
pheatmap(sampleDistMatrix,clustering_distance_rows=sampleDists,clustering_distance_cols=sampleDists,col=colors, fontsize = 6, main=comparison)
dev.off()
# PCA analysis on samples
png(file = "PCA.png", width = 1600, height = 1600, units = "px", res = 300)
pcaData <- plotPCA(rld, intgroup=c("condition"), returnData=TRUE)
colnames(pcaData)[3:5] <- c("Group", "Condition", "Name")
percentVar <- round(100 * attr(pcaData, "percentVar"))
pcaplot <- ggplot(pcaData, aes(PC1, PC2, shape=Condition)) +
aes(color=Name) +
geom_point(size=3.0) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed() +
ggtitle(comparison) +
theme(plot.title = element_text(vjust = 10)) +
ylim(c(-2.5,2.5))
theme(plot.title = element_text(hjust = 0.5))
print(pcaplot)
dev.off()
#!/usr/bin/Rscript
library(DESeq2)
library(gtools)
library(dplyr)
setwd("C:/Users/Fei/Dropbox (EinsteinMed)/RNA-Seq/WTDAY3-vs-KODAY3")
directory <- getwd()
comparison = "WTDAY3-vs-KODAY3"
refCond = sub("-vs-(.*)$", "", comparison)
FC = 0
negFC = FC*(-1)
pvalue = 0.05
pvaluetype = "padj"
conditionfile <- "Conditions.txt"
Cond <- read.table(conditionfile, header=TRUE, row.names=1, fill=TRUE)
Cond$condition <- factor(Cond$condition)
Cond$batch <- factor(Cond$batch)
myCond <- Cond[mixedorder(row.names(Cond)),,drop=FALSE]
head(myCond)
sample_amount <- nrow(myCond)
countFiles <- grep("*.counts.txt",list.files(directory),value=TRUE)
sampleNames <- sub(".counts.txt","",countFiles)
countFiles <- countFiles[mixedorder(sampleNames),drop=FALSE]
countData <- read.table(countFiles[1], row.names=1, check.names=FALSE, quote="\"", fill=TRUE, header=TRUE, sep="\t")
countData <- countData[, 5:ncol(countData), drop=FALSE]
countMatrix <- data.frame(matrix(ncol=0,nrow=nrow(countData)))
countMatrix <- cbind(countMatrix, countData)
colnames(countMatrix)[1] <- "length"
colnames(countMatrix)[2] <- sampleNames[1]
for(i in 2:length(sampleNames)){
countData <- read.table(countFiles[i], row.names=1, check.names=FALSE, quote="\"", fill=TRUE, header=TRUE, sep="\t")
countData <- countData[, 6:ncol(countData), drop=FALSE]
colnames(countData) <- sampleNames[i]
countMatrix <- cbind(countMatrix, countData)
}
countMatrix <- countMatrix[ ,2:ncol(countMatrix)]
if (anyNA(myCond$batch)){
dds = DESeqDataSetFromMatrix(countMatrix, myCond, design = ~ condition)
} else {
dds = DESeqDataSetFromMatrix(countMatrix, myCond, design = ~ batch + condition)
}
dds$condition <- relevel(dds$condition, ref=refCond)
dds <- dds[rowSums(counts(dds)) > 10 * dim(myCond)[1]]
dds <- DESeq(dds)
res <- results(dds, alpha = 0.1)
res <- res[complete.cases(res),]
res
write.csv(countMatrix, file = "rawCounts.csv")
normalizedCounts <- counts(dds, normalized = T)
write.csv(normalizedCounts, file = "normalizedCounts.csv")
resOrdered <- res[order(res$padj),]
write.csv(as.data.frame(resOrdered), file="rawDEGs.csv")
SigDEGs <- subset(resOrdered, eval(as.name(pvaluetype)) < pvalue & abs(log2FoldChange) > FC)
write.csv(as.data.frame(SigDEGs), file="rawSigDEGs.csv")
SigDEGsUp <- subset(resOrdered, eval(as.name(pvaluetype)) < pvalue & (log2FoldChange) > FC)
SigDEGsDown <- subset(resOrdered, eval(as.name(pvaluetype)) < pvalue & (log2FoldChange) < negFC)
SigDEGsList <- SigDEGs[0]
write.table(as.data.frame(SigDEGsList), "SigDEGsList.tsv", quote=FALSE, col.names=FALSE, sep="\t")
SigDEGsUpList <- SigDEGsUp[0]
write.table(as.data.frame(SigDEGsUpList), "SigDEGsUpList.tsv", quote=FALSE, col.names=FALSE, sep="\t")
SigDEGsDownList <- SigDEGsDown[0]
write.table(as.data.frame(SigDEGsDownList), "SigDEGsDownList.tsv", quote=FALSE, col.names=FALSE, sep="\t")
DEGs = read.table("rawDEGs.csv",header=T,sep=",")
SigDEGs = read.table("rawSigDEGs.csv", header=T,sep=",")
normalizedCounts = read.table("normalizedCounts.csv",header=T,sep=",",check.names=FALSE)
colnames(DEGs)[1] <- "ID"
colnames(SigDEGs)[1] <- "ID"
colnames(normalizedCounts)[1] <- "ID"
DEGNormalizedCounts = merge(DEGs,normalizedCounts,by="ID")
SigDEGNormalizedCounts = merge(SigDEGs,normalizedCounts,by="ID")
DEGNormalizedCounts = DEGNormalizedCounts[DEGNormalizedCounts$ID != "",]
SigDEGNormalizedCounts = SigDEGNormalizedCounts[SigDEGNormalizedCounts$ID != "",]
write.csv(DEGNormalizedCounts, file="DEGs.csv", row.names=F, quote=T)
write.csv(SigDEGNormalizedCounts, file="SigDEGs.csv", row.names=F, quote=T)
#plotMA(dds)
library(RColorBrewer)
library(ggplot2)
rld <- rlog(dds) # regular log transformation
write.csv(assay(rld), file = "rlog_transformed_counts.csv")
sampleDists <- dist(t(assay(rld)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste( row.names(colData(rld)), rld$condition, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
png(file = "SampleDistances.png", width = 1600, height = 1600, units = "px", res = 300)
pheatmap(sampleDistMatrix,clustering_distance_rows=sampleDists,clustering_distance_cols=sampleDists,col=colors, fontsize = 6, main=comparison)
dev.off()
# PCA analysis on samples
png(file = "PCA.png", width = 1600, height = 1600, units = "px", res = 300)
pcaData <- plotPCA(rld, intgroup=c("condition"), returnData=TRUE)
colnames(pcaData)[3:5] <- c("Group", "Condition", "Name")
percentVar <- round(100 * attr(pcaData, "percentVar"))
pcaplot <- ggplot(pcaData, aes(PC1, PC2, shape=Condition)) +
aes(color=Name) +
geom_point(size=3.0) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed() +
ggtitle(comparison) +
theme(plot.title = element_text(vjust = 10)) +
ylim(c(-2.5,2.5))
theme(plot.title = element_text(hjust = 0.5))
print(pcaplot)
dev.off()
library(DESeq2)
library(gtools)
library(dplyr)
setwd("C:/Users/Fei/Dropbox (EinsteinMed)/RNA-Seq/WTDAY0-vs-KODAY0")
directory <- getwd()
comparison = "WTDAY0-vs-KODAY0"
refCond = sub("-vs-(.*)$", "", comparison)
FC = 0
negFC = FC*(-1)
pvalue = 0.05
pvaluetype = "padj"
conditionfile <- "Conditions.txt"
Cond <- read.table(conditionfile, header=TRUE, row.names=1, fill=TRUE)
Cond$condition <- factor(Cond$condition)
Cond$batch <- factor(Cond$batch)
myCond <- Cond[mixedorder(row.names(Cond)),,drop=FALSE]
head(myCond)
sample_amount <- nrow(myCond)
countFiles <- grep("*.counts.txt",list.files(directory),value=TRUE)
sampleNames <- sub(".counts.txt","",countFiles)
countFiles <- countFiles[mixedorder(sampleNames),drop=FALSE]
countData <- read.table(countFiles[1], row.names=1, check.names=FALSE, quote="\"", fill=TRUE, header=TRUE, sep="\t")
countData <- countData[, 5:ncol(countData), drop=FALSE]
countMatrix <- data.frame(matrix(ncol=0,nrow=nrow(countData)))
countMatrix <- cbind(countMatrix, countData)
colnames(countMatrix)[1] <- "length"
colnames(countMatrix)[2] <- sampleNames[1]
for(i in 2:length(sampleNames)){
countData <- read.table(countFiles[i], row.names=1, check.names=FALSE, quote="\"", fill=TRUE, header=TRUE, sep="\t")
countData <- countData[, 6:ncol(countData), drop=FALSE]
colnames(countData) <- sampleNames[i]
countMatrix <- cbind(countMatrix, countData)
}
countMatrix <- countMatrix[ ,2:ncol(countMatrix)]
if (anyNA(myCond$batch)){
dds = DESeqDataSetFromMatrix(countMatrix, myCond, design = ~ condition)
} else {
dds = DESeqDataSetFromMatrix(countMatrix, myCond, design = ~ batch + condition)
}
dds$condition <- relevel(dds$condition, ref=refCond)
dds <- dds[rowSums(counts(dds)) > 10 * dim(myCond)[1]]
dds <- DESeq(dds)
res <- results(dds, alpha = 0.1)
res <- res[complete.cases(res),]
res
write.csv(countMatrix, file = "rawCounts.csv")
normalizedCounts <- counts(dds, normalized = T)
write.csv(normalizedCounts, file = "normalizedCounts.csv")
resOrdered <- res[order(res$padj),]
write.csv(as.data.frame(resOrdered), file="rawDEGs.csv")
SigDEGs <- subset(resOrdered, eval(as.name(pvaluetype)) < pvalue & abs(log2FoldChange) > FC)
write.csv(as.data.frame(SigDEGs), file="rawSigDEGs.csv")
SigDEGsUp <- subset(resOrdered, eval(as.name(pvaluetype)) < pvalue & (log2FoldChange) > FC)
SigDEGsDown <- subset(resOrdered, eval(as.name(pvaluetype)) < pvalue & (log2FoldChange) < negFC)
SigDEGsList <- SigDEGs[0]
write.table(as.data.frame(SigDEGsList), "SigDEGsList.tsv", quote=FALSE, col.names=FALSE, sep="\t")
SigDEGsUpList <- SigDEGsUp[0]
write.table(as.data.frame(SigDEGsUpList), "SigDEGsUpList.tsv", quote=FALSE, col.names=FALSE, sep="\t")
SigDEGsDownList <- SigDEGsDown[0]
write.table(as.data.frame(SigDEGsDownList), "SigDEGsDownList.tsv", quote=FALSE, col.names=FALSE, sep="\t")
DEGs = read.table("rawDEGs.csv",header=T,sep=",")
SigDEGs = read.table("rawSigDEGs.csv", header=T,sep=",")
normalizedCounts = read.table("normalizedCounts.csv",header=T,sep=",",check.names=FALSE)
colnames(DEGs)[1] <- "ID"
colnames(SigDEGs)[1] <- "ID"
colnames(normalizedCounts)[1] <- "ID"
DEGNormalizedCounts = merge(DEGs,normalizedCounts,by="ID")
SigDEGNormalizedCounts = merge(SigDEGs,normalizedCounts,by="ID")
DEGNormalizedCounts = DEGNormalizedCounts[DEGNormalizedCounts$ID != "",]
SigDEGNormalizedCounts = SigDEGNormalizedCounts[SigDEGNormalizedCounts$ID != "",]
write.csv(DEGNormalizedCounts, file="DEGs.csv", row.names=F, quote=T)
write.csv(SigDEGNormalizedCounts, file="SigDEGs.csv", row.names=F, quote=T)
#plotMA(dds)
library(RColorBrewer)
library(ggplot2)
rld <- rlog(dds) # regular log transformation
write.csv(assay(rld), file = "rlog_transformed_counts.csv")
sampleDists <- dist(t(assay(rld)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste( row.names(colData(rld)), rld$condition, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
png(file = "SampleDistances.png", width = 1600, height = 1600, units = "px", res = 300)
pheatmap(sampleDistMatrix,clustering_distance_rows=sampleDists,clustering_distance_cols=sampleDists,col=colors, fontsize = 6, main=comparison)
dev.off()
# PCA analysis on samples
png(file = "PCA.png", width = 1600, height = 1600, units = "px", res = 300)
pcaData <- plotPCA(rld, intgroup=c("condition"), returnData=TRUE)
colnames(pcaData)[3:5] <- c("Group", "Condition", "Name")
percentVar <- round(100 * attr(pcaData, "percentVar"))
pcaplot <- ggplot(pcaData, aes(PC1, PC2, shape=Condition)) +
aes(color=Name) +
geom_point(size=3.0) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed() +
ggtitle(comparison) +
theme(plot.title = element_text(vjust = 10)) +
ylim(c(-2.5,2.5))
theme(plot.title = element_text(hjust = 0.5))
print(pcaplot)
dev.off()
#library(ComplexHeatmap)
setwd("C:/Users/mikef/Dropbox (EinsteinMed)/RNA-Seq/")
directory <- getwd()
day0<- read.csv("WTDAY0-vs-KODAY0/SigDEGs.csv",header = T)
day0<- day0$ID
day3<- read.csv("WTDAY3-vs-KODAY3/SigDEGs.csv",header = T)
day3<- day3$ID
day6<- read.csv("WTDAY6-vs-KODAY6/SigDEGs.csv",header = T)
day6<- day6$ID
common <- union(union(day0, day3),day6)
#common <- day6
write.csv(common, "common.csv", row.names = F)
common <- read.csv("common.csv",header = T)
commonDEGs <-common$x
TPMCounts = read.table("WT-vs-KO/normalizedCounts.csv",header=T,sep=",",check.names=FALSE, quote = "\"")
colnames(TPMCounts)[1] = "ID"
zscore <- function(x){
z <- (x - mean(x))/sd(x)
z
}
for (i in 2:length(TPMCounts[1,])){
TPMCounts[,i] = zscore(TPMCounts[,i])
}
CommonTPMCounts <- TPMCounts[TPMCounts$ID %in% commonDEGs,]
rownames(CommonTPMCounts) <- CommonTPMCounts$ID
CommonTPMCounts <- CommonTPMCounts[,-1]
#CommonTPMCounts <- CommonTPMCounts[,c(2,6,7,8,9,10,11,12,13,3,4,5)]
annotation_col <-data.frame(c("Day0", "Day0","Day0","Day0",
"Day3", "Day3","Day3","Day3",
"Day6", "Day6","Day6","Day6"),
c("WT-1", "WT-2","KO-1","KO-2",
"WT-1", "WT-2","KO-1","KO-2",
"WT-1", "WT-2","KO-1","KO-2"))
colnames(annotation_col) <- c("DAY","Group")
annotation_col <- annotation_col[,c(2,1)]
row.names(annotation_col) <- colnames(CommonTPMCounts)
par(mar = c(5, 4, 4, 2), # change the margins
lwd = 2, # increase the line thickness
cex.axis = 1.0 # increase default axis label size
)
png(file = "SigDEGs.png", width = 1650, height = 1600, units = "px", res = 300)
pheatmap(CommonTPMCounts, border_color=NA, treeheight_row=0, scale="row",
cluster_rows=T, show_rownames=F, show_colnames=F, cluster_cols=F,
annotation_col=annotation_col,
fontsize = 6, angle_col ="90", main="Heat Map of DEGs (Expression Z-Score)")
dev.off()
selected <- c("Pax6","Oct2","Fgf5","Nestin","Cxxc5",
"Fgfr2","Brachyury","Sox17","Gata2","Gata4","Gata6",
"Cdx2","Eomes","Krt7","Egfr")
write.csv(selected, "selected.csv", row.names = F)
day6<- read.csv("WTDAY6-vs-KODAY6/SigDEGs.csv",header = T)
NormalizedCounts = read.table("WTDAY6-vs-KODAY6/normalizedCounts.csv",header=T,sep=",",check.names=FALSE, quote = "\"")
colnames(NormalizedCounts)[1] = "ID"
NormalizedCounts$WT = (NormalizedCounts[,2]+NormalizedCounts[,3])/2
NormalizedCounts$KO = (NormalizedCounts[,4]+NormalizedCounts[,5])/2
NormalizedCounts = NormalizedCounts[,c(1,6:7)]
zscore <- function(x){
z <- (x - mean(x))/sd(x)
z
}
for (i in 2:length(NormalizedCounts[1,])){
NormalizedCounts[,i] = zscore(NormalizedCounts[,i])
}
selected <- read.csv("selected.csv",header = T)
selectedDEGs <-selected$x
SelectedNormalizedCounts <- NormalizedCounts[NormalizedCounts$ID %in% selectedDEGs,]
rownames(SelectedNormalizedCounts) <- SelectedNormalizedCounts$ID
SelectedNormalizedCounts <- SelectedNormalizedCounts[,-1]
SelectedNormalizedCounts <- SelectedNormalizedCounts[selectedDEGs,]
SelectedNormalizedCounts <- SelectedNormalizedCounts[!is.na(SelectedNormalizedCounts$WT),]
annotation_col <-data.frame(c("Ectodermal", "Ectodermal","Ectodermal","Mensendodermal",
"Mensendodermal", "Mensendodermal","Mensendodermal","Mensendodermal",
"Trophectodermal", "Trophectodermal","Trophectodermal","Trophectodermal"))
colnames(annotation_col) <- c("Group")
row.names(annotation_col) <- row.names(SelectedNormalizedCounts)
png(file = "EBDay6.png", width = 850, height = 1600, units = "px", res = 300)
pheatmap(SelectedNormalizedCounts, border_color="black", treeheight_row=0, scale="row",
cluster_rows=F, show_rownames=T, show_colnames=T, cluster_cols=F, annotation_row=annotation_col,
fontsize = 6, angle_col ="0", main="EB Day 6")
dev.off()
library(pheatmap)
setwd("C:/Users/mikef/Dropbox (EinsteinMed)/RNA-Seq/")
directory <- getwd()
day0<- read.csv("WTDAY0-vs-KODAY0/SigDEGs.csv",header = T)
FC
pvalue
SigDEGs
resOrdered
eval(as.name(pvaluetype)) < pvalue & abs(log2FoldChange) > FC
eval(as.name(pvaluetype)) < pvalue
SigDEGs <- subset(resOrdered, eval(as.name(pvaluetype)) < pvalue & abs(log2FoldChange) > FC)
SigDEGs
eval(as.name(pvaluetype))
resOrdered
abs(log2FoldChange) > FC
log2FoldChange
subset(resOrdered, eval(as.name(pvaluetype)) < pvalue & abs(log2FoldChange) > FC)
