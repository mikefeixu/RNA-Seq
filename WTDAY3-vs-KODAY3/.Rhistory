library(DESeq2)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
library(DESeq2)
library(Biobase)
library(gplots)
install.packages("gplots")
library(ggplot2)
library(RColorBrewer)
library(pheatmap)
install.packages("pheatmap")
library(pheatmap)
library(matrixStats)
library(lattice)
library(gtools)
library(dplyr)
options(bitmapType="cairo")
setwd("C:/Users/Fei/Dropbox\ (EinsteinMed)/RNA-Seq")
directory <- getwd()
comparisons = "WTDAY0-vs-KODAY0"
cutlFC = 1
cutnegFC = cutlFC*(-1)
cutPvalue = 0.05
pvaluetype = "pvalue"
tpm_exc = "false"
hmfc_exc = "false"
biomart_file = "Rinf/GRCh38_biomart.csv"
conditionfile <- "testCondition.txt" #experiment designs includes three columns (SampleID	condition	batch)
myUnsortedCondition <- read.table( conditionfile, header=TRUE, row.names=1, fill=TRUE)
myUnsortedCondition$condition <- factor(myUnsortedCondition$condition)
myUnsortedCondition$batch <- factor(myUnsortedCondition$batch)
myCondition <- myUnsortedCondition[mixedorder(row.names(myUnsortedCondition)),,drop=FALSE] ##sort by alpha-numeric
head(myCondition)
sample_amount <- nrow(myCondition)
UnsortedSampleFiles <- grep("*.counts.txt",list.files(directory),value=TRUE)
UnsortedSampleFiles
?file.path
directory <- file.path(getwd(),"Rinf")
directory
UnsortedSampleFiles <- grep("*.counts.txt",list.files(directory),value=TRUE)
UnsortedSampleFiles
shortenedFileNames <- sapply(strsplit(UnsortedSampleFiles, split='.counts.txt', fixed=TRUE), function(x) (x[1]))
shortenedFileNames
sampleFiles <- UnsortedSampleFiles[mixedorder(shortenedFileNames),drop=FALSE]
sampleNames <- sub(".counts.txt","",sampleFiles)
countdata <- read.table(sampleFiles[1], header=TRUE, sep = "\t", row.names=1,check.names=FALSE, quote="\"", fill=TRUE)
sampleFiles
directory <- getwd()
UnsortedSampleFiles <- grep("*.counts.txt",list.files(directory),value=TRUE)
shortenedFileNames <- sapply(strsplit(UnsortedSampleFiles, split='.counts.txt', fixed=TRUE), function(x) (x[1]))
sampleFiles <- UnsortedSampleFiles[mixedorder(shortenedFileNames),drop=FALSE]
sampleNames <- sub(".counts.txt","",sampleFiles)
countdata <- read.table(sampleFiles[1], header=TRUE, sep = "\t", row.names=1,check.names=FALSE, quote="\"", fill=TRUE)
countdata <- read.table(sampleFiles[1], header=TRUE, sep = "\t", row.names=1,check.names=FALSE, quote="\"", fill=TRUE)
sampleFiles <- UnsortedSampleFiles[mixedorder(shortenedFileNames),drop=FALSE]
sampleNames <- sub(".counts.txt","",sampleFiles)
countdata <- read.table(sampleFiles[1], header=TRUE, sep = "\t", row.names=1,check.names=FALSE, quote="\"", fill=TRUE)
sampleFiles
UnsortedSampleFiles <- grep("*.counts.txt",list.files(directory),value=TRUE)
UnsortedSampleFiles
directory
shortenedFileNames <- sapply(strsplit(UnsortedSampleFiles, split='.counts.txt', fixed=TRUE), function(x) (x[1]))
sampleFiles <- UnsortedSampleFiles[mixedorder(shortenedFileNames),drop=FALSE]
sampleNames <- sub(".counts.txt","",sampleFiles)
countdata <- read.table(sampleFiles[1], header=TRUE, sep = "\t", row.names=1,check.names=FALSE, quote="\"", fill=TRUE)
countdata <- countdata[ ,5:ncol(countdata), drop=FALSE]
myCountTable <- data.frame(matrix(ncol=0,nrow=nrow(countdata)))
myCountTable <- cbind(myCountTable, countdata)
colnames(myCountTable)[1] <- "length"
colnames(myCountTable)[2] <- sampleNames[1]
for(i in 2:length(sampleNames)){
countdata <- read.table(sampleFiles[i], header=TRUE, sep = "\t", row.names=1,check.names=FALSE, quote="\"", fill=TRUE)
countdata <- countdata[ ,6:ncol(countdata), drop=FALSE]
colnames(countdata) <- sampleNames[i]
myCountTable <- cbind(myCountTable, countdata)
}
##calculate TPM values
if (tpm_exc == "true"){
tpm_table <- data.frame(matrix(ncol=length(sampleNames), nrow=nrow(myCountTable)))
colnames(tpm_table) <- colnames(myCountTable)[2:ncol(myCountTable)]
rownames(tpm_table) <- rownames(myCountTable)
for (j in 1:ncol(tpm_table)){
for(i in 1:nrow(tpm_table)){
tpm_table[i,j] <- (myCountTable[i,j+1]/myCountTable[i,1])
}
scaling_factor <- (sum(tpm_table[j])/1000000)
for(i in 1:nrow(tpm_table)){
tpm_table[i,j] <- (tpm_table[i,j]/scaling_factor)
}
}
tpm_table <- round(tpm_table, 4)
write.csv(tpm_table, file = "TPM_values.csv")
}
myCountTable <- myCountTable[ ,2:ncol(myCountTable)]
#check if there are any batch effects specified
if (anyNA(myCondition$batch)){
dds = DESeqDataSetFromMatrix( myCountTable, myCondition, design = ~ condition )
} else {
dds = DESeqDataSetFromMatrix( myCountTable, myCondition, design = ~ batch + condition )
}
library(DESeq2)
install.packages("acepack")
library(DESeq2)
install.packages("latticeExtra")
library(DESeq2)
library(latticeExtra)
install.packages("latticeExtra")
BiocManager::install("latticeExtra")
library(DESeq2)
install.packages("knitr")
install.packages("xfun")
install.packages("knitr")
update.packages("xfun")
install.packages("knitr")
install.packages("C:/Users/Fei/Downloads/xfun_0.19.zip", repos = NULL, type = "win.binary")
install.packages("knitr")
BiocManager::install("DESeq2")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
update.packages(ask = FALSE, checkBuilt = TRUE)
remove.packages("knitr")
install.packages(c("backports", "bibtex", "bit", "bit64", "brio", "callr", "data.table", "diffobj", "digest", "dplyr", "ellipsis", "fs", "glue", "haven", "Hmisc", "htmltools", "httpuv", "isoband", "jsonlite", "later", "lubridate", "matrixStats", "NMF", "openssl", "pkgload", "processx", "promises", "ps", "Rcpp", "RcppArmadillo", "readr", "rlang", "RSQLite", "stringi", "survival", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "vctrs"))
install.packages(c("class", "KernSmooth", "MASS", "mgcv", "nlme", "nnet", "spatial"), lib="C:/Program Files/R/R-3.5.1/library")
library(DESeq2)
install.packages("BiocManager")
BiocManager::install("pheatmap")
library(pheatmap)
library(DESeq2)
library(Biobase)
library(gplots)
library(ggplot2)
library(RColorBrewer)
library(pheatmap)
library(matrixStats)
library(lattice)
library(gtools)
library(dplyr)
options(bitmapType="cairo")
library(DESeq2)
setwd("C:/Users/Fei/Dropbox\ (EinsteinMed)/RNA-Seq/WTDAY3-vs-KODAY3")
directory <- getwd()
getwd()
setwd("C:/Users/mikef/Dropbox (EinsteinMed)/RNA-Seq/WTDAY3-vs-KODAY3")
directory <- getwd()
comparisons = "WTDAY3-vs-KODAY3"
myUnsortedCondition <- read.table(conditionfile, header=TRUE, row.names=1, fill=TRUE)
conditionfile <- "Conditions.txt"
myUnsortedCondition <- read.table(conditionfile, header=TRUE, row.names=1, fill=TRUE)
myUnsortedCondition$condition <- factor(myUnsortedCondition$condition)
myUnsortedCondition$batch <- factor(myUnsortedCondition$batch)
myCondition <- myUnsortedCondition[mixedorder(row.names(myUnsortedCondition)),,drop=FALSE]
head(myCondition)
sample_amount <- nrow(myCondition)
sample_amount
UnsortedSampleFiles <- grep("*.counts.txt",list.files(directory),value=TRUE)
shortenedFileNames <- sapply(strsplit(UnsortedSampleFiles, split='.counts.txt', fixed=TRUE), function(x) (x[1]))
shortenedFileNames
sampleFiles <- UnsortedSampleFiles[mixedorder(shortenedFileNames),drop=FALSE]
sampleNames <- sub(".counts.txt","",sampleFiles)
sampleFiles[1]
read.table(conditionfile, header=TRUE, row.names=1, fill=TRUE)
?mixedorder
CountFiles <- grep("*.counts.txt",list.files(directory),value=TRUE)
CountFiles
CountFiles <- CountFiles[mixedorder(SampleNames),drop=FALSE]
sampleNames <- sub(".counts.txt","",CountFiles)
sampleNames
CountFiles <- CountFiles[mixedorder(SampleNames),drop=FALSE]
countFiles <- grep("*.counts.txt",list.files(directory),value=TRUE)
sampleNames <- sub(".counts.txt","",countFiles)
countFiles <- countFiles[mixedorder(sampleNames),drop=FALSE]
countFiles
sampleNames
myCountTable <- data.frame(matrix(ncol=0,nrow=nrow(countData)))
?read.table
countData <- read.table(countFiles[1], row.names=1, check.names=FALSE, quote="\"", fill=TRUE, header=TRUE, sep = "\t")
countData <- countData[ ,5:ncol(countData), drop=FALSE]
ncol(countData)
countData <- read.table(countFiles[1], row.names=1, check.names=FALSE, quote="\"", fill=TRUE, header=TRUE, sep = "\t")
View(countData)
ncol(countData)
data.frame(matrix(ncol=0,nrow=nrow(countData)))
myCountTable <- data.frame(matrix(ncol=0,nrow=nrow(countData)))
countData
myCountTable <- cbind(myCountTable, countData)
colnames(myCountTable)[1] <- "length"
colnames(myCountTable)[2] <- sampleNames[1]
myCountTable
for(i in 2:length(sampleNames)){
countData <- read.table(sampleFiles[i], row.names=1, check.names=FALSE, quote="\"", fill=TRUE, header=TRUE, sep="\t")
countData <- countData[, 6:ncol(countData), drop=FALSE]
colnames(countData) <- sampleNames[i]
myCountTable <- cbind(myCountTable, countData)
}
View(myCountTable)
myCountTable <- data.frame(matrix(ncol=0,nrow=nrow(countData)))
myCountTable <- cbind(myCountTable, countData)
colnames(myCountTable)[1] <- "length"
colnames(myCountTable)[2] <- sampleNames[1]
for(i in 2:length(sampleNames)){
countData <- read.table(sampleFiles[i], row.names=1, check.names=FALSE, quote="\"", fill=TRUE, header=TRUE, sep="\t")
countData <- countData[, 6:ncol(countData), drop=FALSE]
colnames(countData) <- sampleNames[i]
myCountTable <- cbind(myCountTable, countData)
}
sampleNames[1]
countData <- read.table(countFiles[1], row.names=1, check.names=FALSE, quote="\"", fill=TRUE, header=TRUE, sep="\t")
countData <- countData[, 5:ncol(countData), drop=FALSE]
myCountTable <- data.frame(matrix(ncol=0,nrow=nrow(countData)))
myCountTable <- cbind(myCountTable, countData)
colnames(myCountTable)[1] <- "length"
colnames(myCountTable)[2] <- sampleNames[1]
for(i in 2:length(sampleNames)){
countData <- read.table(sampleFiles[i], row.names=1, check.names=FALSE, quote="\"", fill=TRUE, header=TRUE, sep="\t")
countData <- countData[, 6:ncol(countData), drop=FALSE]
colnames(countData) <- sampleNames[i]
myCountTable <- cbind(myCountTable, countData)
}
countData
countData
countData <- read.table(countFiles[1], row.names=1, check.names=FALSE, quote="\"", fill=TRUE, header=TRUE, sep="\t")
countData <- countData[, 5:ncol(countData), drop=FALSE]
countData <- read.table(countFiles[1], row.names=1, check.names=FALSE, quote="\"", fill=TRUE, header=TRUE, sep="\t")
countData <- countData[, 5:ncol(countData), drop=FALSE]
countMatrix <- data.frame(matrix(ncol=0,nrow=nrow(countData)))
countMatrix <- cbind(countMatrix, countData)
colnames(countMatrix)[1] <- "length"
colnames(countMatrix)[2] <- sampleNames[1]
for(i in 2:length(sampleNames)){
countData <- read.table(sampleFiles[i], row.names=1, check.names=FALSE, quote="\"", fill=TRUE, header=TRUE, sep="\t")
countData <- countData[, 6:ncol(countData), drop=FALSE]
colnames(countData) <- sampleNames[i]
countMatrix <- cbind(countMatrix, countData)
}
myCond$batch
conditionfile <- "Conditions.txt"
Cond <- read.table(conditionfile, header=TRUE, row.names=1, fill=TRUE)
Cond$condition <- factor(Cond$condition)
Cond$batch <- factor(Cond$batch)
myCond <- Cond[mixedorder(row.names(Cond)),,drop=FALSE]
head(myCond)
sample_amount <- nrow(myCond)
#check if there are any batch effects specified
if (anyNA(myCond$batch)){
dds = DESeqDataSetFromMatrix( countMatrix, myCond, design = ~ condition )
} else {
dds = DESeqDataSetFromMatrix( countMatrix, myCond, design = ~ batch + condition )
}
myCond$batch
#check if there are any batch effects specified
if (anyNA(myCond$batch)){
dds = DESeqDataSetFromMatrix( countMatrix, myCond, design = ~ condition )
} else {
dds = DESeqDataSetFromMatrix( countMatrix, myCond, design = ~ batch + condition )
}
anyNA(myCond$batch)
countMatrix
countMatrix <- countMatrix[ ,2:ncol(countMatrix)]
#check if there are any batch effects specified
if (anyNA(myCond$batch)){
dds = DESeqDataSetFromMatrix( countMatrix, myCond, design = ~ condition )
} else {
dds = DESeqDataSetFromMatrix( countMatrix, myCond, design = ~ batch + condition )
}
myCond[1,"condition"]
as.character(myCond[1,"condition"])
dds$condition
myCond
ref = sub("-vs-(.*)$", "", comparisons)
ref
comparison = "WTDAY3-vs-KODAY3"
refCond = sub("-vs-(.*)$", "", comparison)
dds$condition <- relevel(dds$condition, ref = refCond)	#for specifying the name of the first group to compare against
dds <- dds[ rowSums(counts(dds)) > 5 * dim(myCondition)[1]]
dim(dds)
dds <- DESeq(dds)
rld <- rlog(dds) # regular log transformation
res <- results(dds)
coefnum <- length(resultsNames(dds))
coefnum
?lfcShrink
#res <- lfcShrink(dds, coef=coefnum, res=res)
res
summary(res)
summary(res)
?DESeq
length(resultsNames(dds))
res
summary(res)
write.csv(countMatrix, file = "rawCounts.csv")
normalizedCounts <- counts(dds, normalized = T)
write.csv(normalizedCounts, file = "normalizedCounts.csv")
resOrdered <- res[order(res$padj),]
write.csv(as.data.frame(resOrdered), file="rawDEGs.csv")
#Call out Differential expression genes
resSig <- subset(resOrdered, eval(as.name(pvaluetype)) < cutPvalue & abs(log2FoldChange) > cutlFC)
?eval
cutlFC = 1
cutnegFC = cutlFC*(-1)
cutPvalue = 0.05
pvaluetype = "padj"
#Call out Differential expression genes
resSig <- subset(resOrdered, eval(as.name(pvaluetype)) < cutPvalue & abs(log2FoldChange) > cutlFC)
write.csv(as.data.frame(resSig), file="rawSigDEGs.csv")
resSigUp <- subset(resOrdered, eval(as.name(pvaluetype)) < cutPvalue & (log2FoldChange) > cutlFC)
resSigDown <- subset(resOrdered, eval(as.name(pvaluetype)) < cutPvalue & (log2FoldChange) < cutnegFC)
resSigUp
View(resSigUp)
#Call out Differential expression genes
resSig <- subset(resOrdered, eval(as.name(pvaluetype)) < cutPvalue & abs(log2FoldChange) > cutlFC)
write.csv(as.data.frame(resSig), file="rawSigDEGs.csv")
resSigUp <- subset(resOrdered, eval(as.name(pvaluetype)) < cutPvalue & (log2FoldChange) > cutlFC)
resSigDown <- subset(resOrdered, eval(as.name(pvaluetype)) < cutPvalue & (log2FoldChange) < cutnegFC)
#Generate normalized counts table
DEGs = read.table("rawDEGs.csv",header=T,sep=",")
SigDEGs = read.table("rawSigDEGs.csv", header=T,sep=",")
normalizedCounts = read.table("normalizedCounts.csv",header=T,sep=",",check.names=FALSE)
colnames(DEGs)[1] <- "ID"
colnames(SigDEGs)[1] <- "ID"
colnames(normalizedCounts)[1] <- "ID"
DEGNormalizedCounts = merge(DEGs,normalizedCounts,by="ID")
SigDEGNormalizedCounts = merge(SigDEGs,normalizedCounts,by="ID")
write.csv(DEGNormalizedCounts, file="SigDEGs.csv", row.names=F, quote=T)
write.csv(SigDEGNormalizedCounts, file="SigDEGs.csv", row.names=F, quote=T)
file.remove("rawDEGs.csv")
file.remove("rawSigDEGs.csv")
#Call out Differential expression genes
SigDEGs <- subset(resOrdered, eval(as.name(pvaluetype)) < cutPvalue & abs(log2FoldChange) > cutlFC)
write.csv(as.data.frame(SigDEGs), file="rawSigDEGs.csv")
SigDEGsUp <- subset(resOrdered, eval(as.name(pvaluetype)) < cutPvalue & (log2FoldChange) > cutlFC)
SigDEGsDown <- subset(resOrdered, eval(as.name(pvaluetype)) < cutPvalue & (log2FoldChange) < cutnegFC)
SigDEGsList <- SigDEGs[0]
write.table(as.data.frame(SigDEGsList), "SigDEGsList.tsv", quote=FALSE, col.names=FALSE, sep="\t")
SigDEGsUpList <- SigDEGsUp[0]
write.table(as.data.frame(SigDEGsUpList), "SigDEGsUpList.tsv", quote=FALSE, col.names=FALSE, sep="\t")
SigDEGsDownList <- SigDEGsDown[0]
write.table(as.data.frame(SigDEGsDownList), "SigDEGsDownList.tsv", quote=FALSE, col.names=FALSE, sep="\t")
write.csv(as.data.frame(resOrdered), file="rawDEGs.csv")
#Call out Differential expression genes
SigDEGs <- subset(resOrdered, eval(as.name(pvaluetype)) < cutPvalue & abs(log2FoldChange) > cutlFC)
write.csv(as.data.frame(SigDEGs), file="rawSigDEGs.csv")
write.csv(DEGNormalizedCounts, file="SigDEGs.csv", row.names=F, quote=T)
write.csv(SigDEGNormalizedCounts, file="SigDEGs.csv", row.names=F, quote=T)
file.remove("rawDEGs.csv")
file.remove("rawSigDEGs.csv")
summary(SigDEGs)
summary(SigDEGsUp)
summary(SigDEGsDown)
refCond = sub("-vs-(.*)$", "", comparison)
cutlFC = 0
cutnegFC = cutlFC*(-1)
cutPvalue = 0.05
pvaluetype = "padj"
write.csv(as.data.frame(resOrdered), file="rawDEGs.csv")
#Call out Differential expression genes
SigDEGs <- subset(resOrdered, eval(as.name(pvaluetype)) < cutPvalue & abs(log2FoldChange) > cutlFC)
write.csv(as.data.frame(SigDEGs), file="rawSigDEGs.csv")
SigDEGsUp <- subset(resOrdered, eval(as.name(pvaluetype)) < cutPvalue & (log2FoldChange) > cutlFC)
SigDEGsDown <- subset(resOrdered, eval(as.name(pvaluetype)) < cutPvalue & (log2FoldChange) < cutnegFC)
SigDEGsList <- SigDEGs[0]
write.table(as.data.frame(SigDEGsList), "SigDEGsList.tsv", quote=FALSE, col.names=FALSE, sep="\t")
SigDEGsUpList <- SigDEGsUp[0]
write.table(as.data.frame(SigDEGsUpList), "SigDEGsUpList.tsv", quote=FALSE, col.names=FALSE, sep="\t")
SigDEGsDownList <- SigDEGsDown[0]
write.table(as.data.frame(SigDEGsDownList), "SigDEGsDownList.tsv", quote=FALSE, col.names=FALSE, sep="\t")
#Generate normalized counts table
DEGs = read.table("rawDEGs.csv",header=T,sep=",")
SigDEGs = read.table("rawSigDEGs.csv", header=T,sep=",")
normalizedCounts = read.table("normalizedCounts.csv",header=T,sep=",",check.names=FALSE)
colnames(DEGs)[1] <- "ID"
colnames(SigDEGs)[1] <- "ID"
colnames(normalizedCounts)[1] <- "ID"
DEGNormalizedCounts = merge(DEGs,normalizedCounts,by="ID")
SigDEGNormalizedCounts = merge(SigDEGs,normalizedCounts,by="ID")
write.csv(DEGNormalizedCounts, file="SigDEGs.csv", row.names=F, quote=T)
write.csv(SigDEGNormalizedCounts, file="SigDEGs.csv", row.names=F, quote=T)
View(SigDEGsDownList)
summary(SigDEGsDownList)
summary(SigDEGs)
summary(SigDEGsList)
SigDEGsDown
SigDEGsUp
res
#coefnum <- length(resultsNames(dds))
#res <- lfcShrink(dds, coef=coefnum, res=res)
#summary(res)
res <- results(dds, alpha = 0.01)
res
res[complete.cases(res),]
?results
#coefnum <- length(resultsNames(dds))
#res <- lfcShrink(dds, coef=coefnum, res=res)
#summary(res)
res <- results(dds, alpha = 0.05)
res
#coefnum <- length(resultsNames(dds))
#res <- lfcShrink(dds, coef=coefnum, res=res)
#summary(res)
res <- results(dds, alpha = 0.1)
res
res[complete.cases(res),]
res
res <- res[order(res$padj),]
res
upR <- res[(res$padj < 0.01) & (res$log2FoldChange > 0),]
res$log2FoldChange
res$padj
downR <- res[(res$padj < 0.01) & (res$log2FoldChange < 0),]
nrow(upR) #2776 genes up-regulated
res <- results(dds)
res
write.csv(countMatrix, file = "rawCounts.csv")
normalizedCounts <- counts(dds, normalized = T)
write.csv(normalizedCounts, file = "normalizedCounts.csv")
resOrdered <- res[order(res$padj),]
write.csv(as.data.frame(resOrdered), file="rawDEGs.csv")
#Call out Differential expression genes
SigDEGs <- subset(resOrdered, eval(as.name(pvaluetype)) < cutPvalue & abs(log2FoldChange) > cutlFC)
write.csv(as.data.frame(SigDEGs), file="rawSigDEGs.csv")
SigDEGsUp <- subset(resOrdered, eval(as.name(pvaluetype)) < cutPvalue & (log2FoldChange) > cutlFC)
SigDEGsDown <- subset(resOrdered, eval(as.name(pvaluetype)) < cutPvalue & (log2FoldChange) < cutnegFC)
SigDEGsList <- SigDEGs[0]
SigDEGs
SigDEGsUp
SigDEGsDown
SigDEGsList <- SigDEGs[0]
write.table(as.data.frame(SigDEGsList), "SigDEGsList.tsv", quote=FALSE, col.names=FALSE, sep="\t")
SigDEGsUpList <- SigDEGsUp[0]
write.table(as.data.frame(SigDEGsUpList), "SigDEGsUpList.tsv", quote=FALSE, col.names=FALSE, sep="\t")
SigDEGsDownList <- SigDEGsDown[0]
write.table(as.data.frame(SigDEGsDownList), "SigDEGsDownList.tsv", quote=FALSE, col.names=FALSE, sep="\t")
#Generate normalized counts table
DEGs = read.table("rawDEGs.csv",header=T,sep=",")
SigDEGs = read.table("rawSigDEGs.csv", header=T,sep=",")
normalizedCounts = read.table("normalizedCounts.csv",header=T,sep=",",check.names=FALSE)
colnames(DEGs)[1] <- "ID"
colnames(SigDEGs)[1] <- "ID"
colnames(DEGs)[1] <- "ID"
colnames(SigDEGs)[1] <- "ID"
colnames(normalizedCounts)[1] <- "ID"
DEGNormalizedCounts = merge(DEGs,normalizedCounts,by="ID")
SigDEGNormalizedCounts = merge(SigDEGs,normalizedCounts,by="ID")
write.csv(DEGNormalizedCounts, file="SigDEGs.csv", row.names=F, quote=T)
write.csv(SigDEGNormalizedCounts, file="SigDEGs.csv", row.names=F, quote=T)
