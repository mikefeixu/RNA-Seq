tpm_calc = "True"
conditionfile <- "Conditions.txt"
Cond <- read.table(conditionfile, header=TRUE, row.names=1, fill=TRUE)
Cond$condition <- factor(Cond$condition)
Cond$batch <- factor(Cond$batch)
myCond <- Cond[mixedorder(row.names(Cond)),,drop=FALSE]
head(myCond)
sample_amount <- nrow(myCond)
countFiles <- grep("*.counts.txt",list.files(directory),value=TRUE)
sampleNames <- sub(".counts.txt","",countFiles)
countFiles <- countFiles[mixedorder(sampleNames),drop=FALSE]
countData <- read.table(countFiles[1], row.names=1, check.names=FALSE, quote="\"", fill=TRUE, header=TRUE, sep="\t")
countData <- countData[, 5:ncol(countData), drop=FALSE]
countMatrix <- data.frame(matrix(ncol=0,nrow=nrow(countData)))
countMatrix <- cbind(countMatrix, countData)
colnames(countMatrix)[1] <- "length"
colnames(countMatrix)[2] <- sampleNames[1]
for(i in 2:length(sampleNames)){
countData <- read.table(countFiles[i], row.names=1, check.names=FALSE, quote="\"", fill=TRUE, header=TRUE, sep="\t")
countData <- countData[, 6:ncol(countData), drop=FALSE]
colnames(countData) <- sampleNames[i]
countMatrix <- cbind(countMatrix, countData)
}
##calculate TPM values
if (tpm_calc == "True"){
tpm_table <- data.frame(matrix(ncol=length(sampleNames), nrow=nrow(countMatrix)))
colnames(tpm_table) <- colnames(countMatrix)[2:ncol(countMatrix)]
rownames(tpm_table) <- rownames(countMatrix)
for (j in 1:ncol(tpm_table)){
for(i in 1:nrow(tpm_table)){
tpm_table[i,j] <- (countMatrix[i,j+1]/countMatrix[i,1])
}
scaling_factor <- (sum(tpm_table[j])/1000000)
for(i in 1:nrow(tpm_table)){
tpm_table[i,j] <- (tpm_table[i,j]/scaling_factor)
}
}
tpm_table <- round(tpm_table, 4)
write.csv(tpm_table, file = "TPM_values.csv")
}
countMatrix <- countMatrix[ ,2:ncol(countMatrix)]
#check if there are any batch effects specified
if (anyNA(myCond$batch)){
dds = DESeqDataSetFromMatrix(countMatrix, myCond, design = ~ condition)
} else {
dds = DESeqDataSetFromMatrix(countMatrix, myCond, design = ~ batch + condition)
}
dds$condition <- relevel(dds$condition, ref=refCond)
dds <- dds[rowSums(counts(dds)) > 10 * dim(myCond)[1]]
#dim(dds)
dds <- DESeq(dds)
res <- results(dds, alpha = 0.1)
res <- res[complete.cases(res),]
#res <- res[order(res$padj),]
res
#coefnum <- length(resultsNames(dds))
#res <- lfcShrink(dds, coef=coefnum, res=res)
#summary(res)
# res <- results(dds, alpha = 0.1)
# res <- res[complete.cases(res),]
# res <- res[order(res$padj),]
# upR <- res[(res$padj < 0.01) & (res$log2FoldChange > 0),]
# downR <- res[(res$padj < 0.01) & (res$log2FoldChange < 0),]
# nrow(upR) #2776 genes up-regulated
# nrow(downR) #2790 genes down-regulated
write.csv(countMatrix, file = "rawCounts.csv")
normalizedCounts <- counts(dds, normalized = T)
write.csv(normalizedCounts, file = "normalizedCounts.csv")
#rld <- rlog(dds) # regular log transformation
#write.csv(assay(rld), file = "rlog_transformed_counts.csv")
resOrdered <- res[order(res$padj),]
write.csv(as.data.frame(resOrdered), file="rawDEGs.csv")
#Call out Differential expression genes
SigDEGs <- subset(resOrdered, eval(as.name(pvaluetype)) < cutPvalue & abs(log2FoldChange) > cutlFC)
write.csv(as.data.frame(SigDEGs), file="rawSigDEGs.csv")
SigDEGsUp <- subset(resOrdered, eval(as.name(pvaluetype)) < cutPvalue & (log2FoldChange) > cutlFC)
SigDEGsDown <- subset(resOrdered, eval(as.name(pvaluetype)) < cutPvalue & (log2FoldChange) < cutnegFC)
SigDEGsList <- SigDEGs[0]
write.table(as.data.frame(SigDEGsList), "SigDEGsList.tsv", quote=FALSE, col.names=FALSE, sep="\t")
SigDEGsUpList <- SigDEGsUp[0]
write.table(as.data.frame(SigDEGsUpList), "SigDEGsUpList.tsv", quote=FALSE, col.names=FALSE, sep="\t")
SigDEGsDownList <- SigDEGsDown[0]
write.table(as.data.frame(SigDEGsDownList), "SigDEGsDownList.tsv", quote=FALSE, col.names=FALSE, sep="\t")
#Generate normalized counts table
DEGs = read.table("rawDEGs.csv",header=T,sep=",")
DEGs = DEGs[DEGs$ID != "",]
SigDEGs = read.table("rawSigDEGs.csv", header=T,sep=",")
SigDEGs = SigDEGs[SigDEGs$ID != "",]
normalizedCounts = read.table("normalizedCounts.csv",header=T,sep=",",check.names=FALSE)
colnames(DEGs)[1] <- "ID"
colnames(SigDEGs)[1] <- "ID"
colnames(normalizedCounts)[1] <- "ID"
DEGNormalizedCounts = merge(DEGs,normalizedCounts,by="ID")
SigDEGNormalizedCounts = merge(SigDEGs,normalizedCounts,by="ID")
write.csv(DEGNormalizedCounts, file="DEGs.csv", row.names=F, quote=T)
write.csv(SigDEGNormalizedCounts, file="SigDEGs.csv", row.names=F, quote=T)
plotMA(dds)
#Generate normalized counts table
DEGs = read.table("rawDEGs.csv",header=T,sep=",")
DEGs = DEGs[DEGs$ID != "",]
#Generate normalized counts table
DEGs = read.table("rawDEGs.csv",header=T,sep=",")
DEGs = read.table("rawDEGs.csv",header=T,sep=",")
SigDEGs = read.table("rawSigDEGs.csv", header=T,sep=",")
normalizedCounts = read.table("normalizedCounts.csv",header=T,sep=",",check.names=FALSE)
colnames(DEGs)[1] <- "ID"
colnames(SigDEGs)[1] <- "ID"
colnames(normalizedCounts)[1] <- "ID"
DEGNormalizedCounts = merge(DEGs,normalizedCounts,by="ID")
SigDEGNormalizedCounts = merge(SigDEGs,normalizedCounts,by="ID")
write.csv(DEGNormalizedCounts, file="DEGs.csv", row.names=F, quote=T)
write.csv(SigDEGNormalizedCounts, file="SigDEGs.csv", row.names=F, quote=T)
plotMA(dds)
DEGNormalizedCounts = DEGNormalizedCounts[DEGNormalizedCounts$ID != "",]
SigDEGNormalizedCounts = SigDEGNormalizedCounts[SigDEGNormalizedCounts$ID != "",]
DEGs = read.table("rawDEGs.csv",header=T,sep=",")
SigDEGs = read.table("rawSigDEGs.csv", header=T,sep=",")
normalizedCounts = read.table("normalizedCounts.csv",header=T,sep=",",check.names=FALSE)
colnames(DEGs)[1] <- "ID"
colnames(SigDEGs)[1] <- "ID"
colnames(normalizedCounts)[1] <- "ID"
DEGNormalizedCounts = merge(DEGs,normalizedCounts,by="ID")
SigDEGNormalizedCounts = merge(SigDEGs,normalizedCounts,by="ID")
DEGNormalizedCounts = DEGNormalizedCounts[DEGNormalizedCounts$ID != "",]
SigDEGNormalizedCounts = SigDEGNormalizedCounts[SigDEGNormalizedCounts$ID != "",]
write.csv(DEGNormalizedCounts, file="DEGs.csv", row.names=F, quote=T)
write.csv(SigDEGNormalizedCounts, file="SigDEGs.csv", row.names=F, quote=T)
setwd("C:/Users/mikef/Dropbox (EinsteinMed)/RNA-Seq/WTDAY3-vs-KODAY3")
directory <- getwd()
comparison = "WTDAY3-vs-KODAY3"
refCond = sub("-vs-(.*)$", "", comparison)
cutlFC = 0
cutnegFC = cutlFC*(-1)
cutPvalue = 0.05
pvaluetype = "padj"
tpm_calc = "True"
conditionfile <- "Conditions.txt"
Cond <- read.table(conditionfile, header=TRUE, row.names=1, fill=TRUE)
Cond$condition <- factor(Cond$condition)
Cond$batch <- factor(Cond$batch)
myCond <- Cond[mixedorder(row.names(Cond)),,drop=FALSE]
head(myCond)
sample_amount <- nrow(myCond)
countFiles <- grep("*.counts.txt",list.files(directory),value=TRUE)
sampleNames <- sub(".counts.txt","",countFiles)
countFiles <- countFiles[mixedorder(sampleNames),drop=FALSE]
countData <- read.table(countFiles[1], row.names=1, check.names=FALSE, quote="\"", fill=TRUE, header=TRUE, sep="\t")
countData <- countData[, 5:ncol(countData), drop=FALSE]
countMatrix <- data.frame(matrix(ncol=0,nrow=nrow(countData)))
countMatrix <- cbind(countMatrix, countData)
colnames(countMatrix)[1] <- "length"
colnames(countMatrix)[2] <- sampleNames[1]
for(i in 2:length(sampleNames)){
countData <- read.table(countFiles[i], row.names=1, check.names=FALSE, quote="\"", fill=TRUE, header=TRUE, sep="\t")
countData <- countData[, 6:ncol(countData), drop=FALSE]
colnames(countData) <- sampleNames[i]
countMatrix <- cbind(countMatrix, countData)
}
##calculate TPM values
if (tpm_calc == "True"){
tpm_table <- data.frame(matrix(ncol=length(sampleNames), nrow=nrow(countMatrix)))
colnames(tpm_table) <- colnames(countMatrix)[2:ncol(countMatrix)]
rownames(tpm_table) <- rownames(countMatrix)
for (j in 1:ncol(tpm_table)){
for(i in 1:nrow(tpm_table)){
tpm_table[i,j] <- (countMatrix[i,j+1]/countMatrix[i,1])
}
scaling_factor <- (sum(tpm_table[j])/1000000)
for(i in 1:nrow(tpm_table)){
tpm_table[i,j] <- (tpm_table[i,j]/scaling_factor)
}
}
tpm_table <- round(tpm_table, 4)
write.csv(tpm_table, file = "TPM_values.csv")
}
countMatrix <- countMatrix[ ,2:ncol(countMatrix)]
#check if there are any batch effects specified
if (anyNA(myCond$batch)){
dds = DESeqDataSetFromMatrix(countMatrix, myCond, design = ~ condition)
} else {
dds = DESeqDataSetFromMatrix(countMatrix, myCond, design = ~ batch + condition)
}
dds$condition <- relevel(dds$condition, ref=refCond)
dds <- dds[rowSums(counts(dds)) > 10 * dim(myCond)[1]]
#dim(dds)
dds <- DESeq(dds)
res <- results(dds, alpha = 0.1)
res <- res[complete.cases(res),]
#res <- res[order(res$padj),]
res
#coefnum <- length(resultsNames(dds))
#res <- lfcShrink(dds, coef=coefnum, res=res)
#summary(res)
# res <- results(dds, alpha = 0.1)
# res <- res[complete.cases(res),]
# res <- res[order(res$padj),]
# upR <- res[(res$padj < 0.01) & (res$log2FoldChange > 0),]
# downR <- res[(res$padj < 0.01) & (res$log2FoldChange < 0),]
# nrow(upR) #2776 genes up-regulated
# nrow(downR) #2790 genes down-regulated
write.csv(countMatrix, file = "rawCounts.csv")
normalizedCounts <- counts(dds, normalized = T)
write.csv(normalizedCounts, file = "normalizedCounts.csv")
#rld <- rlog(dds) # regular log transformation
#write.csv(assay(rld), file = "rlog_transformed_counts.csv")
resOrdered <- res[order(res$padj),]
write.csv(as.data.frame(resOrdered), file="rawDEGs.csv")
#Call out Differential expression genes
SigDEGs <- subset(resOrdered, eval(as.name(pvaluetype)) < cutPvalue & abs(log2FoldChange) > cutlFC)
write.csv(as.data.frame(SigDEGs), file="rawSigDEGs.csv")
SigDEGsUp <- subset(resOrdered, eval(as.name(pvaluetype)) < cutPvalue & (log2FoldChange) > cutlFC)
SigDEGsDown <- subset(resOrdered, eval(as.name(pvaluetype)) < cutPvalue & (log2FoldChange) < cutnegFC)
SigDEGsList <- SigDEGs[0]
write.table(as.data.frame(SigDEGsList), "SigDEGsList.tsv", quote=FALSE, col.names=FALSE, sep="\t")
SigDEGsUpList <- SigDEGsUp[0]
write.table(as.data.frame(SigDEGsUpList), "SigDEGsUpList.tsv", quote=FALSE, col.names=FALSE, sep="\t")
SigDEGsDownList <- SigDEGsDown[0]
write.table(as.data.frame(SigDEGsDownList), "SigDEGsDownList.tsv", quote=FALSE, col.names=FALSE, sep="\t")
#Generate normalized counts table
DEGs = read.table("rawDEGs.csv",header=T,sep=",")
SigDEGs = read.table("rawSigDEGs.csv", header=T,sep=",")
normalizedCounts = read.table("normalizedCounts.csv",header=T,sep=",",check.names=FALSE)
colnames(DEGs)[1] <- "ID"
colnames(SigDEGs)[1] <- "ID"
colnames(normalizedCounts)[1] <- "ID"
DEGNormalizedCounts = merge(DEGs,normalizedCounts,by="ID")
SigDEGNormalizedCounts = merge(SigDEGs,normalizedCounts,by="ID")
DEGNormalizedCounts = DEGNormalizedCounts[DEGNormalizedCounts$ID != "",]
SigDEGNormalizedCounts = SigDEGNormalizedCounts[SigDEGNormalizedCounts$ID != "",]
write.csv(DEGNormalizedCounts, file="DEGs.csv", row.names=F, quote=T)
write.csv(SigDEGNormalizedCounts, file="SigDEGs.csv", row.names=F, quote=T)
plotMA(dds)
setwd("C:/Users/mikef/Dropbox (EinsteinMed)/RNA-Seq/WTDAY6-vs-KODAY6")
directory <- getwd()
comparison = "WTDAY6-vs-KODAY6"
refCond = sub("-vs-(.*)$", "", comparison)
cutlFC = 0
cutnegFC = cutlFC*(-1)
cutPvalue = 0.05
pvaluetype = "padj"
tpm_calc = "True"
conditionfile <- "Conditions.txt"
Cond <- read.table(conditionfile, header=TRUE, row.names=1, fill=TRUE)
Cond$condition <- factor(Cond$condition)
Cond$batch <- factor(Cond$batch)
myCond <- Cond[mixedorder(row.names(Cond)),,drop=FALSE]
head(myCond)
sample_amount <- nrow(myCond)
countFiles <- grep("*.counts.txt",list.files(directory),value=TRUE)
sampleNames <- sub(".counts.txt","",countFiles)
countFiles <- countFiles[mixedorder(sampleNames),drop=FALSE]
countData <- read.table(countFiles[1], row.names=1, check.names=FALSE, quote="\"", fill=TRUE, header=TRUE, sep="\t")
countData <- countData[, 5:ncol(countData), drop=FALSE]
countMatrix <- data.frame(matrix(ncol=0,nrow=nrow(countData)))
countMatrix <- cbind(countMatrix, countData)
colnames(countMatrix)[1] <- "length"
colnames(countMatrix)[2] <- sampleNames[1]
for(i in 2:length(sampleNames)){
countData <- read.table(countFiles[i], row.names=1, check.names=FALSE, quote="\"", fill=TRUE, header=TRUE, sep="\t")
countData <- countData[, 6:ncol(countData), drop=FALSE]
colnames(countData) <- sampleNames[i]
countMatrix <- cbind(countMatrix, countData)
}
##calculate TPM values
if (tpm_calc == "True"){
tpm_table <- data.frame(matrix(ncol=length(sampleNames), nrow=nrow(countMatrix)))
colnames(tpm_table) <- colnames(countMatrix)[2:ncol(countMatrix)]
rownames(tpm_table) <- rownames(countMatrix)
for (j in 1:ncol(tpm_table)){
for(i in 1:nrow(tpm_table)){
tpm_table[i,j] <- (countMatrix[i,j+1]/countMatrix[i,1])
}
scaling_factor <- (sum(tpm_table[j])/1000000)
for(i in 1:nrow(tpm_table)){
tpm_table[i,j] <- (tpm_table[i,j]/scaling_factor)
}
}
tpm_table <- round(tpm_table, 4)
write.csv(tpm_table, file = "TPM_values.csv")
}
countMatrix <- countMatrix[ ,2:ncol(countMatrix)]
#check if there are any batch effects specified
if (anyNA(myCond$batch)){
dds = DESeqDataSetFromMatrix(countMatrix, myCond, design = ~ condition)
} else {
dds = DESeqDataSetFromMatrix(countMatrix, myCond, design = ~ batch + condition)
}
dds$condition <- relevel(dds$condition, ref=refCond)
dds <- dds[rowSums(counts(dds)) > 10 * dim(myCond)[1]]
#dim(dds)
dds <- DESeq(dds)
res <- results(dds, alpha = 0.1)
res <- res[complete.cases(res),]
#res <- res[order(res$padj),]
res
#coefnum <- length(resultsNames(dds))
#res <- lfcShrink(dds, coef=coefnum, res=res)
#summary(res)
# res <- results(dds, alpha = 0.1)
# res <- res[complete.cases(res),]
# res <- res[order(res$padj),]
# upR <- res[(res$padj < 0.01) & (res$log2FoldChange > 0),]
# downR <- res[(res$padj < 0.01) & (res$log2FoldChange < 0),]
# nrow(upR) #2776 genes up-regulated
# nrow(downR) #2790 genes down-regulated
write.csv(countMatrix, file = "rawCounts.csv")
normalizedCounts <- counts(dds, normalized = T)
write.csv(normalizedCounts, file = "normalizedCounts.csv")
#rld <- rlog(dds) # regular log transformation
#write.csv(assay(rld), file = "rlog_transformed_counts.csv")
resOrdered <- res[order(res$padj),]
write.csv(as.data.frame(resOrdered), file="rawDEGs.csv")
#Call out Differential expression genes
SigDEGs <- subset(resOrdered, eval(as.name(pvaluetype)) < cutPvalue & abs(log2FoldChange) > cutlFC)
write.csv(as.data.frame(SigDEGs), file="rawSigDEGs.csv")
SigDEGsUp <- subset(resOrdered, eval(as.name(pvaluetype)) < cutPvalue & (log2FoldChange) > cutlFC)
SigDEGsDown <- subset(resOrdered, eval(as.name(pvaluetype)) < cutPvalue & (log2FoldChange) < cutnegFC)
SigDEGsList <- SigDEGs[0]
write.table(as.data.frame(SigDEGsList), "SigDEGsList.tsv", quote=FALSE, col.names=FALSE, sep="\t")
SigDEGsUpList <- SigDEGsUp[0]
write.table(as.data.frame(SigDEGsUpList), "SigDEGsUpList.tsv", quote=FALSE, col.names=FALSE, sep="\t")
SigDEGsDownList <- SigDEGsDown[0]
write.table(as.data.frame(SigDEGsDownList), "SigDEGsDownList.tsv", quote=FALSE, col.names=FALSE, sep="\t")
#Generate normalized counts table
DEGs = read.table("rawDEGs.csv",header=T,sep=",")
SigDEGs = read.table("rawSigDEGs.csv", header=T,sep=",")
normalizedCounts = read.table("normalizedCounts.csv",header=T,sep=",",check.names=FALSE)
colnames(DEGs)[1] <- "ID"
colnames(SigDEGs)[1] <- "ID"
colnames(normalizedCounts)[1] <- "ID"
DEGNormalizedCounts = merge(DEGs,normalizedCounts,by="ID")
SigDEGNormalizedCounts = merge(SigDEGs,normalizedCounts,by="ID")
DEGNormalizedCounts = DEGNormalizedCounts[DEGNormalizedCounts$ID != "",]
SigDEGNormalizedCounts = SigDEGNormalizedCounts[SigDEGNormalizedCounts$ID != "",]
write.csv(DEGNormalizedCounts, file="DEGs.csv", row.names=F, quote=T)
write.csv(SigDEGNormalizedCounts, file="SigDEGs.csv", row.names=F, quote=T)
plotMA(dds)
day0<- read.csv("WTDAY6-vs-KODAY6/SigDEGsList",sep = ",")
setwd("C:/Users/mikef/Dropbox (EinsteinMed)/RNA-Seq/")
directory <- getwd()
day0<- read.csv("WTDAY6-vs-KODAY6/SigDEGsList",sep = ",")
day0<- read.csv("WTDAY6-vs-KODAY6/SigDEGsList.txt",sep = ",")
day0<- read.csv("WTDAY6-vs-KODAY6/SigDEGsList.tsv",sep = ",")
day0
day0<- read.table("WTDAY6-vs-KODAY6/SigDEGsList.tsv",sep = ",")
day0
day0<- read.table("WTDAY6-vs-KODAY6/SigDEGsList.tsv")
day0<- read.table("WTDAY6-vs-KODAY6/SigDEGsList.tsv")
day0<- read.table("WTDAY0-vs-KODAY0/SigDEGsList.tsv")
?read.table
day0<- read.csv("WTDAY0-vs-KODAY0/SigDEGsList.tsv")
day0<- read.csv("WTDAY0-vs-KODAY0/SigDEGsList.tsv")
View(day0)
day0<- read.csv("WTDAY0-vs-KODAY0/SigDEGsList.tsv",header = F)
View(day0)
day6<- read.csv("WTDAY6-vs-KODAY6/SigDEGsList.tsv",header = F)
View(day6)
day3<- read.csv("WTDAY3-vs-KODAY3/SigDEGsList.tsv",header = F)
day3 = day3[day3$ID != "",]
day6<- read.csv("WTDAY6-vs-KODAY6/SigDEGsList.tsv",header = F)
day6 = day6[day6$ID != "",]
day0<- read.csv("WTDAY0-vs-KODAY0/SigDEGsList.tsv",header = F)
day0 = day0[day0$ID != "",]
day0<- read.csv("WTDAY0-vs-KODAY0/SigDEGsList.tsv",header = F)
day0 = day0[day0$ID != "",]
day0<- read.csv("WTDAY0-vs-KODAY0/SigDEGsList.tsv",header = F)
day3<- read.csv("WTDAY3-vs-KODAY3/SigDEGsList.tsv",header = F)
day6<- read.csv("WTDAY6-vs-KODAY6/SigDEGsList.tsv",header = F)
day0<- read.csv("WTDAY0-vs-KODAY0/SigDEGsList.tsv",header = F)
View(day0)
day0 <- day0$V1
day0<- read.csv("WTDAY0-vs-KODAY0/SigDEGs.csv",header = F)
day3<- read.csv("WTDAY3-vs-KODAY3/SigDEGs.csv",header = F)
day6<- read.csv("WTDAY6-vs-KODAY6/SigDEGs.csv",header = F)
View(day0)
day0<- read.csv("WTDAY0-vs-KODAY0/SigDEGs.csv",header = T)
day3<- read.csv("WTDAY3-vs-KODAY3/SigDEGs.csv",header = T)
day6<- read.csv("WTDAY6-vs-KODAY6/SigDEGs.csv",header = T)
day3<- read.csv("WTDAY3-vs-KODAY3/SigDEGs.csv",header = T)
day3<- day3$ID
day6<- read.csv("WTDAY6-vs-KODAY6/SigDEGs.csv",header = T)
day6<- day6$ID
intersect(day0, day3, day6)
intersect(day0, day3)
day0
day0<- read.csv("WTDAY0-vs-KODAY0/SigDEGs.csv",header = T)
day0<- day0$ID
day3<- read.csv("WTDAY3-vs-KODAY3/SigDEGs.csv",header = T)
day3<- day3$ID
day6<- read.csv("WTDAY6-vs-KODAY6/SigDEGs.csv",header = T)
day6<- day6$ID
intersect(day0, day3)
intersect(intersect(day0, day3),day6)
common <- intersect(intersect(day0, day3),day6)
write.csv(common, "common.csv", row.names = F)
read.csv("common.csv",header = T)
commonDEGs <- read.csv("common.csv",header = T)
commonDEGs <-commonDEGs$x
commonDEGs <-commonDEGs$x
commonDEGs <- read.csv("common.csv",header = T)
commonDEGs <-commonDEGs$x
commonDEGs
common <- read.csv("common.csv",header = T)
common <- read.csv("common.csv",header = T)
commonDEGs <-common$x
commonDEGs
normalizedCounts = read.table("TPM_values.csv",header=T,sep=",",check.names=FALSE)
normalizedCounts = read.table("WT-vs-KO/TPM_values.csv",header=T,sep=",",check.names=FALSE)
TPMCounts = read.table("WT-vs-KO/TPM_values.csv",header=T,sep=",",check.names=FALSE)
View(TPMCounts)
colnames(TPMCounts)[1] = "ID"
TPMCounts[TPMCounts$ID %in% common,]
TPMCounts$ID %in% common
TPMCounts[TPMCounts$ID %in% common,]
TPMCounts
View(TPMCounts)
common
intersect(TPMCounts$ID, common)
TPMCounts$ID
common
TPMCounts = read.table("WT-vs-KO/TPM_values.csv",header=T,sep=",",check.names=FALSE, quote = F)
TPMCounts = read.table("WT-vs-KO/TPM_values.csv",header=T,sep=",",check.names=FALSE, quote = "")
colnames(TPMCounts)[1] = "ID"
TPMCounts[TPMCounts$ID %in% common,]
intersect(TPMCounts$ID, common)
TPMCounts$ID
TPMCounts = read.table("WT-vs-KO/TPM_values.csv",header=T,sep=",",check.names=FALSE, quote = "\"")
colnames(TPMCounts)[1] = "ID"
TPMCounts[TPMCounts$ID %in% common,]
intersect(TPMCounts$ID, common)
TPMCounts
TPMCounts$ID
common
common <- read.csv("common.csv",header = T)
commonDEGs <-common$x
TPMCounts[TPMCounts$ID %in% commonDEGs,]
intersect(TPMCounts$ID, commonDEGs)
TPMCounts[TPMCounts$ID %in% commonDEGs,]
CommonTPMCounts <- TPMCounts[TPMCounts$ID %in% commonDEGs,]
CommonTPMCounts
rownames(CommonTPMCounts) <- CommonTPMCounts$ID
CommonTPMCounts
CommonTPMCounts <- CommonTPMCounts[,c(1,4,5,6,7,8,9,10,11,12,2,3,4)]
CommonTPMCounts
CommonTPMCounts <- TPMCounts[TPMCounts$ID %in% commonDEGs,]
rownames(CommonTPMCounts) <- CommonTPMCounts$ID
CommonTPMCounts <- CommonTPMCounts[,c(2,6,7,8,9,10,11,12,13,3,4,5)]
View(CommonTPMCounts)
library(pheatmap)
comparisons
pheatmap(CommonTPMCounts, cluster_rows=F, show_rownames=TRUE, cluster_cols=F, fontsize = 6, main="comparisons")
pheatmap(CommonTPMCounts, cluster_rows=F, show_rownames=F, cluster_cols=F, fontsize = 6, main="comparisons")
png(file = "Biclustering_top_adj_p-value_DEGs.png", width = 1600, height = 1600, units = "px", res = 300)
pheatmap(CommonTPMCounts, cluster_rows=F, show_rownames=F, cluster_cols=F, fontsize = 6, main="comparisons")
dev.off()
dev.off()
png(file = "Biclustering_top_adj_p-value_DEGs.png", width = 1600, height = 1600, units = "px", res = 300)
pheatmap(CommonTPMCounts, cluster_rows=F, show_rownames=F, cluster_cols=F, fontsize = 6, main="comparisons")
dev.off()
pheatmap(CommonTPMCounts, cluster_rows=T, show_rownames=F, cluster_cols=F, fontsize = 6, main="comparisons")
pheatmap(CommonTPMCounts, cluster_rows=T, show_rownames=T, cluster_cols=F, fontsize = 6, main="comparisons")
?pheatmap
pheatmap(CommonTPMCounts, cluster_rows=T, show_rownames=T, cluster_cols=F, fontsize = 6, angle_col ="45", main="comparisons")
png(file = "Biclustering_top_adj_p-value_DEGs.png", width = 1600, height = 1600, units = "px", res = 300)
pheatmap(CommonTPMCounts, cluster_rows=T, show_rownames=T, cluster_cols=F, fontsize = 6, angle_col ="45", main="comparisons")
dev.off()
dev.off()
png(file = "Biclustering_top_adj_p-value_DEGs.png", width = 1600, height = 1600, units = "px", res = 300)
pheatmap(CommonTPMCounts, cluster_rows=T, show_rownames=T, cluster_cols=F, fontsize = 6, angle_col ="45", main="comparisons")
dev.off()
png(file = "Biclustering_top_adj_p-value_DEGs.png", width = 1600, height = 1600, units = "px", res = 300)
pheatmap(CommonTPMCounts, cluster_rows=T, show_rownames=T, cluster_cols=F, fontsize = 6, angle_col ="45", main="Heat Map of common DEGs")
dev.off()
plotMA(dds)
library(VennDiagram)
myV <- plotVenn(list(I=day0,
IV=day3,
II=day6,
setColors = c("cornflowerblue", "green", "yellow"), borderWidth=3, opacity=0.2))
library(VennDiagram)
myV <- plotVenn(list(I=day0,
IV=day3,
II=day6,
setColors = c("cornflowerblue", "green", "yellow"), borderWidth=3, opacity=0.2))
install.packages("plotVenn")
install.packages("nVennR")
?plotVenn
install.packages("PlotVenn")
install.packages("DescTool")
install.packages("DescTools")
library(PlotVenn)
library(DescTools)
?PlotVenn
PlotVenn(x=list(day0, day3,day6))
?PlotVenn
list(day0, day3,day6)
PlotVenn(x=list(day0, day3,day6), labels = C("day0, day3, day6"))
PlotVenn(x=list(day0, day3,day6), labels = list("day0", "day3", "day6"))
install.packages("BioVenn")
?BioVenn
library(BioVenn)
?BioVenn
??BioVenn
biovenn <- draw.venn(day0, day3, day6, t_c="#FFFFFF", subtitle="Example diagram 3", st_c="#FFFFFF", xt_c="#FFFFFF", yt_c="#FFFFFF", zt_c="#FFFFFF", nrtype="abs", nr_c="#FFFFFF", x_c="#FFFF00", y_c="#FF00FF", z_c="#00FFFF", bg_c="#000000")
biovenn <- draw.venn(day0, day3, day6, t_c="#FFFFFF", subtitle="Venn Plot Day0, Day3, Day6", st_c="#FFFFFF", xt_c="#FFFFFF", yt_c="#FFFFFF", zt_c="#FFFFFF", nrtype="abs", nr_c="#FFFFFF", x_c="#FFFF00", y_c="#FF00FF", z_c="#00FFFF")
?draw.venn
PlotVenn(x=list(day0, day3,day6), labels = list("day0", "day3", "day6"))
day6
biovenn <- draw.venn(day0, day3, day6, xtitle="", ytitle, ztitle, t_c="#FFFFFF", subtitle="Venn Plot Day0, Day3, Day6", st_c="#FFFFFF", xt_c="#FFFFFF", yt_c="#FFFFFF", zt_c="#FFFFFF", nrtype="abs", nr_c="#FFFFFF", x_c="#FFFF00", y_c="#FF00FF", z_c="#00FFFF")
biovenn <- draw.venn(day0, day3, day6, xtitle="", ytitle, ztitle, t_c="#FFFFFF", subtitle="Venn Plot Day0, Day3, Day6", st_c="#FFFFFF", xt_c="#FFFFFF", yt_c="#FFFFFF", zt_c="#FFFFFF", nrtype="abs", nr_c="#FFFFFF", x_c="#FFFF00", y_c="#FF00FF", z_c="#00FFFF")
biovenn <- draw.venn(day0, day3, day6, xtitle="day0", ytitle="day3", ztitle="day6", t_c="#FFFFFF", subtitle="Venn Plot Day0, Day3, Day6", st_c="#FFFFFF", xt_c="#FFFFFF", yt_c="#FFFFFF", zt_c="#FFFFFF", nrtype="abs", nr_c="#FFFFFF", x_c="#FFFF00", y_c="#FF00FF", z_c="#00FFFF")
biovenn <- draw.venn(day0, day3, day6, xtitle="Day0", ytitle="Day3", ztitle="Day6", t_c="#FFFFFF", subtitle="Venn Plot Day0, Day3, Day6", st_c="#FFFFFF", xt_c="#FFFFFF", yt_c="#FFFFFF", zt_c="#FFFFFF", nrtype="abs", nr_c="#FFFFFF", x_c="#FFFF00", y_c="#FF00FF", z_c="#00FFFF")
